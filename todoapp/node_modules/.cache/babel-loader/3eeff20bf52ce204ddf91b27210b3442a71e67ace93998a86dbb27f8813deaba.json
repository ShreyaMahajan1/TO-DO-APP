{"ast":null,"code":"User;\nconst ToDo = require('./todoModel');\nconst add = (req, res) => {\n  var validationerrors = [];\n  const userId = req.user.id;\n  if (!req.body.ToDoTitle) validationerrors.push(\"ToDo Title is required\");\n  if (validationerrors.length > 0) {\n    res.json({\n      status: 422,\n      success: false,\n      message: \"Validation error\",\n      errors: validationerrors\n    });\n  } else {\n    // Duplicate check\n    ToDo.findOne({\n      ToDoTitle: req.body.ToDoTitle\n    }).then(content => {\n      if (!content) {\n        // Insert new ToDo\n        let ToDoObj = new ToDo();\n        ToDoObj.ToDoTitle = req.body.ToDoTitle;\n        ToDoObj.status = req.body.status || 'pending'; // Default status is 'pending'\n\n        ToDoObj.save().then(ToDoData => {\n          res.json({\n            status: 200,\n            success: true,\n            message: \"Record Inserted\",\n            data: ToDoData\n          });\n        }).catch(err => {\n          res.json({\n            status: 500,\n            success: false,\n            message: \"Internal Server Error\",\n            errors: err.message\n          });\n        });\n      } else {\n        res.json({\n          status: 422,\n          success: false,\n          message: \"Record already exists\",\n          data: content\n        });\n      }\n    }).catch(err => {\n      res.json({\n        status: 500,\n        success: false,\n        message: \"Internal Server Error\",\n        errors: err.message\n      });\n    });\n  }\n};\nconst getall = async (req, res) => {\n  var totalcount = await ToDo.find().countDocuments().exec();\n  ToDo.find().then(ToDoData => {\n    res.json({\n      status: 200,\n      success: true,\n      message: \"Data loaded\",\n      total: totalcount,\n      data: ToDoData\n    });\n  }).catch(err => {\n    res.json({\n      status: 500,\n      success: false,\n      message: \"Internal Server Error\",\n      errors: err.message\n    });\n  });\n};\nconst getpagination = (req, res) => {\n  var lim = 2;\n  var skipcount = 0;\n  if (req.body.pageno > 1) {\n    skipcount = (req.body.pageno - 1) * lim;\n  }\n  ToDo.find({\n    status: req.body.status\n  }) // Filter by status\n  .limit(lim).skip(skipcount).sort({\n    createdAt: +1\n  }).then(ToDoData => {\n    res.json({\n      status: 200,\n      success: true,\n      message: \"Data loaded\",\n      data: ToDoData\n    });\n  }).catch(err => {\n    res.json({\n      status: 500,\n      success: false,\n      message: \"Internal Server Error\",\n      errors: err.message\n    });\n  });\n};\nconst getsingle = (req, res) => {\n  validationerrors = [];\n  if (!req.body._id) validationerrors.push(\"_id is required\");\n  if (validationerrors.length > 0) {\n    res.json({\n      status: 422,\n      success: false,\n      message: \"Validation error\",\n      errors: validationerrors\n    });\n  } else {\n    // Check existence of record\n    ToDo.findOne({\n      _id: req.body._id\n    }).then(ToDoData => {\n      if (!ToDoData) {\n        res.json({\n          status: 404,\n          success: false,\n          message: \"Record not found\"\n        });\n      } else {\n        res.json({\n          status: 200,\n          success: true,\n          message: \"Data loaded\",\n          data: ToDoData\n        });\n      }\n    }).catch(err => {\n      res.json({\n        status: 500,\n        success: false,\n        message: \"Internal Server Error\",\n        errors: err.message\n      });\n    });\n  }\n};\nconst deletedata = (req, res) => {\n  validationerrors = [];\n  if (!req.body._id) validationerrors.push(\"_id is required\");\n  if (validationerrors.length > 0) {\n    res.json({\n      status: 422,\n      success: false,\n      message: \"Validation error\",\n      errors: validationerrors\n    });\n  } else {\n    // Check existence of record\n    ToDo.findOne({\n      _id: req.body._id\n    }).then(ToDoData => {\n      if (!ToDoData) {\n        res.json({\n          status: 404,\n          success: false,\n          message: \"Record not found\"\n        });\n      } else {\n        // Delete \n        ToDo.deleteOne({\n          _id: req.body._id\n        }).then(() => {\n          res.json({\n            status: 200,\n            success: true,\n            message: \"Record Deleted\"\n          });\n        }).catch(err => {\n          res.json({\n            status: 500,\n            success: false,\n            message: \"Unable to delete record\",\n            errors: err.message\n          });\n        });\n      }\n    }).catch(err => {\n      res.json({\n        status: 500,\n        success: false,\n        message: \"Internal Server Error\",\n        errors: err.message\n      });\n    });\n  }\n};\nconst updatedata = (req, res) => {\n  validationerrors = [];\n  if (!req.body._id) validationerrors.push(\"_id is required\");\n  if (validationerrors.length > 0) {\n    res.json({\n      status: 422,\n      success: false,\n      message: \"Validation error\",\n      errors: validationerrors\n    });\n  } else {\n    // Check existence of record\n    ToDo.findOne({\n      _id: req.body._id\n    }).then(ToDoData => {\n      if (!ToDoData) {\n        res.json({\n          status: 404,\n          success: false,\n          message: \"Record not found\"\n        });\n      } else {\n        // Update\n        if (req.body.ToDoTitle) ToDoData.ToDoTitle = req.body.ToDoTitle;\n        ToDoData.save().then(saveRes => {\n          res.json({\n            status: 200,\n            success: true,\n            message: \"Record Updated\",\n            data: saveRes\n          });\n        }).catch(err => {\n          res.json({\n            status: 500,\n            success: false,\n            message: \"Internal Server error\",\n            errors: err.message\n          });\n        });\n      }\n    }).catch(err => {\n      res.json({\n        status: 500,\n        success: false,\n        message: \"Internal Server Error\",\n        errors: err.message\n      });\n    });\n  }\n};\nconst softdelete = (req, res) => {\n  validationerrors = [];\n  if (!req.body._id) validationerrors.push(\"_id is required\");\n  if (validationerrors.length > 0) {\n    res.json({\n      status: 422,\n      success: false,\n      message: \"Validation error\",\n      errors: validationerrors\n    });\n  } else {\n    // Find ToDo by ID\n    ToDo.findOne({\n      _id: req.body._id\n    }).then(ToDoData => {\n      if (!ToDoData) {\n        res.json({\n          status: 404,\n          success: false,\n          message: \"Record not found\"\n        });\n      } else {\n        // Update status field\n        if (req.body.status) ToDoData.status = req.body.status;\n\n        // Save updated ToDo\n        ToDoData.save().then(saveRes => {\n          res.json({\n            status: 200,\n            success: true,\n            message: \"Record status updated successfully\",\n            data: saveRes\n          });\n        }).catch(err => {\n          res.json({\n            status: 500,\n            success: false,\n            message: \"Internal Server error\",\n            errors: err.message\n          });\n        });\n      }\n    }).catch(err => {\n      res.json({\n        status: 500,\n        success: false,\n        message: \"Internal Server Error\",\n        errors: err.message\n      });\n    });\n  }\n};\nmodule.exports = {\n  add,\n  getall,\n  getpagination,\n  getsingle,\n  deletedata,\n  updatedata,\n  softdelete\n};","map":{"version":3,"names":["User","ToDo","require","add","req","res","validationerrors","userId","user","id","body","ToDoTitle","push","length","json","status","success","message","errors","findOne","then","content","ToDoObj","save","ToDoData","data","catch","err","getall","totalcount","find","countDocuments","exec","total","getpagination","lim","skipcount","pageno","limit","skip","sort","createdAt","getsingle","_id","deletedata","deleteOne","updatedata","saveRes","softdelete","module","exports"],"sources":["C:/Users/HP/OneDrive/Documents/GitHub/TO-DO-APP/TO-DO-APP/todoapp/src/Components/ToDo.js"],"sourcesContent":["User\r\nconst ToDo = require('./todoModel');\r\n\r\nconst add = (req, res) => {\r\n    var validationerrors = [];\r\n    const userId = req.user.id; \r\n    if (!req.body.ToDoTitle)\r\n        validationerrors.push(\"ToDo Title is required\");\r\n\r\n    if (validationerrors.length > 0) {\r\n        res.json({\r\n            status: 422,\r\n            success: false,\r\n            message: \"Validation error\",\r\n            errors: validationerrors\r\n        });\r\n    }\r\n    else {\r\n        // Duplicate check\r\n        ToDo.findOne({ ToDoTitle: req.body.ToDoTitle })\r\n            .then(content => {\r\n                if (!content) {\r\n                    // Insert new ToDo\r\n                    let ToDoObj = new ToDo();\r\n                    ToDoObj.ToDoTitle = req.body.ToDoTitle;\r\n                    ToDoObj.status = req.body.status || 'pending'; // Default status is 'pending'\r\n\r\n                    ToDoObj.save()\r\n                        .then(ToDoData => {\r\n                            res.json({\r\n                                status: 200,\r\n                                success: true,\r\n                                message: \"Record Inserted\",\r\n                                data: ToDoData\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            res.json({\r\n                                status: 500,\r\n                                success: false,\r\n                                message: \"Internal Server Error\",\r\n                                errors: err.message\r\n                            });\r\n                        });\r\n                }\r\n                else {\r\n                    res.json({\r\n                        status: 422,\r\n                        success: false,\r\n                        message: \"Record already exists\",\r\n                        data: content\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.json({\r\n                    status: 500,\r\n                    success: false,\r\n                    message: \"Internal Server Error\",\r\n                    errors: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nconst getall = async (req, res) => {\r\n    var totalcount = await ToDo.find().countDocuments().exec();\r\n    ToDo.find()\r\n        .then(ToDoData => {\r\n            res.json({\r\n                status: 200,\r\n                success: true,\r\n                message: \"Data loaded\",\r\n                total: totalcount,\r\n                data: ToDoData\r\n            });\r\n        })\r\n        .catch(err => {\r\n            res.json({\r\n                status: 500,\r\n                success: false,\r\n                message: \"Internal Server Error\",\r\n                errors: err.message\r\n            });\r\n        });\r\n}\r\n\r\nconst getpagination = (req, res) => {\r\n    var lim = 2;\r\n    var skipcount = 0;\r\n\r\n    if (req.body.pageno > 1) {\r\n        skipcount = (req.body.pageno - 1) * lim;\r\n    }\r\n\r\n    ToDo.find({ status: req.body.status }) // Filter by status\r\n        .limit(lim)\r\n        .skip(skipcount)\r\n        .sort({ createdAt: +1 })\r\n        .then(ToDoData => {\r\n            res.json({\r\n                status: 200,\r\n                success: true,\r\n                message: \"Data loaded\",\r\n                data: ToDoData\r\n            });\r\n        })\r\n        .catch(err => {\r\n            res.json({\r\n                status: 500,\r\n                success: false,\r\n                message: \"Internal Server Error\",\r\n                errors: err.message\r\n            });\r\n        });\r\n}\r\n\r\nconst getsingle = (req, res) => {\r\n    validationerrors = [];\r\n\r\n    if (!req.body._id)\r\n        validationerrors.push(\"_id is required\");\r\n\r\n    if (validationerrors.length > 0) {\r\n        res.json({\r\n            status: 422,\r\n            success: false,\r\n            message: \"Validation error\",\r\n            errors: validationerrors\r\n        });\r\n    } else {\r\n        // Check existence of record\r\n        ToDo.findOne({ _id: req.body._id })\r\n            .then(ToDoData => {\r\n                if (!ToDoData) {\r\n                    res.json({\r\n                        status: 404,\r\n                        success: false,\r\n                        message: \"Record not found\"\r\n                    });\r\n                }\r\n                else {\r\n                    res.json({\r\n                        status: 200,\r\n                        success: true,\r\n                        message: \"Data loaded\",\r\n                        data: ToDoData\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.json({\r\n                    status: 500,\r\n                    success: false,\r\n                    message: \"Internal Server Error\",\r\n                    errors: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nconst deletedata = (req, res) => {\r\n    validationerrors = [];\r\n\r\n    if (!req.body._id)\r\n        validationerrors.push(\"_id is required\");\r\n\r\n    if (validationerrors.length > 0) {\r\n        res.json({\r\n            status: 422,\r\n            success: false,\r\n            message: \"Validation error\",\r\n            errors: validationerrors\r\n        });\r\n    } else {\r\n        // Check existence of record\r\n        ToDo.findOne({ _id: req.body._id })\r\n            .then(ToDoData => {\r\n                if (!ToDoData) {\r\n                    res.json({\r\n                        status: 404,\r\n                        success: false,\r\n                        message: \"Record not found\"\r\n                    });\r\n                }\r\n                else {\r\n                    // Delete \r\n                    ToDo.deleteOne({ _id: req.body._id })\r\n                        .then(() => {\r\n                            res.json({\r\n                                status: 200,\r\n                                success: true,\r\n                                message: \"Record Deleted\"\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            res.json({\r\n                                status: 500,\r\n                                success: false,\r\n                                message: \"Unable to delete record\",\r\n                                errors: err.message\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.json({\r\n                    status: 500,\r\n                    success: false,\r\n                    message: \"Internal Server Error\",\r\n                    errors: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nconst updatedata = (req, res) => {\r\n    validationerrors = [];\r\n\r\n    if (!req.body._id)\r\n        validationerrors.push(\"_id is required\");\r\n\r\n    if (validationerrors.length > 0) {\r\n        res.json({\r\n            status: 422,\r\n            success: false,\r\n            message: \"Validation error\",\r\n            errors: validationerrors\r\n        });\r\n    } else {\r\n        // Check existence of record\r\n        ToDo.findOne({ _id: req.body._id })\r\n            .then(ToDoData => {\r\n                if (!ToDoData) {\r\n                    res.json({\r\n                        status: 404,\r\n                        success: false,\r\n                        message: \"Record not found\"\r\n                    });\r\n                }\r\n                else {\r\n                    // Update\r\n                    if (req.body.ToDoTitle)\r\n                        ToDoData.ToDoTitle = req.body.ToDoTitle;\r\n\r\n                    ToDoData.save()\r\n                        .then(saveRes => {\r\n                            res.json({\r\n                                status: 200,\r\n                                success: true,\r\n                                message: \"Record Updated\",\r\n                                data: saveRes\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            res.json({\r\n                                status: 500,\r\n                                success: false,\r\n                                message: \"Internal Server error\",\r\n                                errors: err.message\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.json({\r\n                    status: 500,\r\n                    success: false,\r\n                    message: \"Internal Server Error\",\r\n                    errors: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nconst softdelete = (req, res) => {\r\n    validationerrors = [];\r\n\r\n    if (!req.body._id)\r\n        validationerrors.push(\"_id is required\");\r\n\r\n    if (validationerrors.length > 0) {\r\n        res.json({\r\n            status: 422,\r\n            success: false,\r\n            message: \"Validation error\",\r\n            errors: validationerrors\r\n        });\r\n    } else {\r\n        // Find ToDo by ID\r\n        ToDo.findOne({ _id: req.body._id })\r\n            .then(ToDoData => {\r\n                if (!ToDoData) {\r\n                    res.json({\r\n                        status: 404,\r\n                        success: false,\r\n                        message: \"Record not found\"\r\n                    });\r\n                } else {\r\n                    // Update status field\r\n                    if (req.body.status)\r\n                        ToDoData.status = req.body.status;\r\n\r\n                    // Save updated ToDo\r\n                    ToDoData.save()\r\n                        .then(saveRes => {\r\n                            res.json({\r\n                                status: 200,\r\n                                success: true,\r\n                                message: \"Record status updated successfully\",\r\n                                data: saveRes\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            res.json({\r\n                                status: 500,\r\n                                success: false,\r\n                                message: \"Internal Server error\",\r\n                                errors: err.message\r\n                            });\r\n                        });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.json({\r\n                    status: 500,\r\n                    success: false,\r\n                    message: \"Internal Server Error\",\r\n                    errors: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    add,\r\n    getall,\r\n    getpagination,\r\n    getsingle,\r\n    deletedata,\r\n    updatedata,\r\n    softdelete\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}